// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: driver/grpc/proto/driver.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DriverServiceClient is the client API for DriverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriverServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Event(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CommandLog(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	UpdateTableData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SchemaStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_SchemaStreamClient, error)
	StartStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_StartStreamClient, error)
	RunStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_RunStreamClient, error)
	WriteTagStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_WriteTagStreamClient, error)
	BatchRunStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_BatchRunStreamClient, error)
	DebugStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_DebugStreamClient, error)
	BatchCommand(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Response, error)
	ChangeCommand(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Response, error)
}

type driverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverServiceClient(cc grpc.ClientConnInterface) DriverServiceClient {
	return &driverServiceClient{cc}
}

func (c *driverServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/driver.DriverService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) Event(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/driver.DriverService/Event", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) CommandLog(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/driver.DriverService/CommandLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) UpdateTableData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/driver.DriverService/UpdateTableData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) SchemaStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_SchemaStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverService_ServiceDesc.Streams[0], "/driver.DriverService/SchemaStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverServiceSchemaStreamClient{stream}
	return x, nil
}

type DriverService_SchemaStreamClient interface {
	Send(*SchemaResult) error
	Recv() (*SchemaRequest, error)
	grpc.ClientStream
}

type driverServiceSchemaStreamClient struct {
	grpc.ClientStream
}

func (x *driverServiceSchemaStreamClient) Send(m *SchemaResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverServiceSchemaStreamClient) Recv() (*SchemaRequest, error) {
	m := new(SchemaRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverServiceClient) StartStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_StartStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverService_ServiceDesc.Streams[1], "/driver.DriverService/StartStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverServiceStartStreamClient{stream}
	return x, nil
}

type DriverService_StartStreamClient interface {
	Send(*StartResult) error
	Recv() (*StartRequest, error)
	grpc.ClientStream
}

type driverServiceStartStreamClient struct {
	grpc.ClientStream
}

func (x *driverServiceStartStreamClient) Send(m *StartResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverServiceStartStreamClient) Recv() (*StartRequest, error) {
	m := new(StartRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverServiceClient) RunStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_RunStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverService_ServiceDesc.Streams[2], "/driver.DriverService/RunStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverServiceRunStreamClient{stream}
	return x, nil
}

type DriverService_RunStreamClient interface {
	Send(*RunResult) error
	Recv() (*RunRequest, error)
	grpc.ClientStream
}

type driverServiceRunStreamClient struct {
	grpc.ClientStream
}

func (x *driverServiceRunStreamClient) Send(m *RunResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverServiceRunStreamClient) Recv() (*RunRequest, error) {
	m := new(RunRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverServiceClient) WriteTagStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_WriteTagStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverService_ServiceDesc.Streams[3], "/driver.DriverService/WriteTagStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverServiceWriteTagStreamClient{stream}
	return x, nil
}

type DriverService_WriteTagStreamClient interface {
	Send(*RunResult) error
	Recv() (*RunRequest, error)
	grpc.ClientStream
}

type driverServiceWriteTagStreamClient struct {
	grpc.ClientStream
}

func (x *driverServiceWriteTagStreamClient) Send(m *RunResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverServiceWriteTagStreamClient) Recv() (*RunRequest, error) {
	m := new(RunRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverServiceClient) BatchRunStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_BatchRunStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverService_ServiceDesc.Streams[4], "/driver.DriverService/BatchRunStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverServiceBatchRunStreamClient{stream}
	return x, nil
}

type DriverService_BatchRunStreamClient interface {
	Send(*BatchRunResult) error
	Recv() (*BatchRunRequest, error)
	grpc.ClientStream
}

type driverServiceBatchRunStreamClient struct {
	grpc.ClientStream
}

func (x *driverServiceBatchRunStreamClient) Send(m *BatchRunResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverServiceBatchRunStreamClient) Recv() (*BatchRunRequest, error) {
	m := new(BatchRunRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverServiceClient) DebugStream(ctx context.Context, opts ...grpc.CallOption) (DriverService_DebugStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverService_ServiceDesc.Streams[5], "/driver.DriverService/DebugStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverServiceDebugStreamClient{stream}
	return x, nil
}

type DriverService_DebugStreamClient interface {
	Send(*Debug) error
	Recv() (*Debug, error)
	grpc.ClientStream
}

type driverServiceDebugStreamClient struct {
	grpc.ClientStream
}

func (x *driverServiceDebugStreamClient) Send(m *Debug) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverServiceDebugStreamClient) Recv() (*Debug, error) {
	m := new(Debug)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverServiceClient) BatchCommand(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/driver.DriverService/BatchCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) ChangeCommand(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/driver.DriverService/ChangeCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverServiceServer is the server API for DriverService service.
// All implementations must embed UnimplementedDriverServiceServer
// for forward compatibility
type DriverServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Event(context.Context, *Request) (*Response, error)
	CommandLog(context.Context, *Request) (*Response, error)
	UpdateTableData(context.Context, *Request) (*Response, error)
	SchemaStream(DriverService_SchemaStreamServer) error
	StartStream(DriverService_StartStreamServer) error
	RunStream(DriverService_RunStreamServer) error
	WriteTagStream(DriverService_WriteTagStreamServer) error
	BatchRunStream(DriverService_BatchRunStreamServer) error
	DebugStream(DriverService_DebugStreamServer) error
	BatchCommand(context.Context, *CreateRequest) (*Response, error)
	ChangeCommand(context.Context, *UpdateRequest) (*Response, error)
	mustEmbedUnimplementedDriverServiceServer()
}

// UnimplementedDriverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDriverServiceServer struct {
}

func (UnimplementedDriverServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedDriverServiceServer) Event(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedDriverServiceServer) CommandLog(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandLog not implemented")
}
func (UnimplementedDriverServiceServer) UpdateTableData(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTableData not implemented")
}
func (UnimplementedDriverServiceServer) SchemaStream(DriverService_SchemaStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SchemaStream not implemented")
}
func (UnimplementedDriverServiceServer) StartStream(DriverService_StartStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedDriverServiceServer) RunStream(DriverService_RunStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RunStream not implemented")
}
func (UnimplementedDriverServiceServer) WriteTagStream(DriverService_WriteTagStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteTagStream not implemented")
}
func (UnimplementedDriverServiceServer) BatchRunStream(DriverService_BatchRunStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchRunStream not implemented")
}
func (UnimplementedDriverServiceServer) DebugStream(DriverService_DebugStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DebugStream not implemented")
}
func (UnimplementedDriverServiceServer) BatchCommand(context.Context, *CreateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCommand not implemented")
}
func (UnimplementedDriverServiceServer) ChangeCommand(context.Context, *UpdateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCommand not implemented")
}
func (UnimplementedDriverServiceServer) mustEmbedUnimplementedDriverServiceServer() {}

// UnsafeDriverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverServiceServer will
// result in compilation errors.
type UnsafeDriverServiceServer interface {
	mustEmbedUnimplementedDriverServiceServer()
}

func RegisterDriverServiceServer(s grpc.ServiceRegistrar, srv DriverServiceServer) {
	s.RegisterService(&DriverService_ServiceDesc, srv)
}

func _DriverService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.DriverService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.DriverService/Event",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).Event(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_CommandLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).CommandLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.DriverService/CommandLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).CommandLog(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_UpdateTableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).UpdateTableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.DriverService/UpdateTableData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).UpdateTableData(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_SchemaStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServiceServer).SchemaStream(&driverServiceSchemaStreamServer{stream})
}

type DriverService_SchemaStreamServer interface {
	Send(*SchemaRequest) error
	Recv() (*SchemaResult, error)
	grpc.ServerStream
}

type driverServiceSchemaStreamServer struct {
	grpc.ServerStream
}

func (x *driverServiceSchemaStreamServer) Send(m *SchemaRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverServiceSchemaStreamServer) Recv() (*SchemaResult, error) {
	m := new(SchemaResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverService_StartStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServiceServer).StartStream(&driverServiceStartStreamServer{stream})
}

type DriverService_StartStreamServer interface {
	Send(*StartRequest) error
	Recv() (*StartResult, error)
	grpc.ServerStream
}

type driverServiceStartStreamServer struct {
	grpc.ServerStream
}

func (x *driverServiceStartStreamServer) Send(m *StartRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverServiceStartStreamServer) Recv() (*StartResult, error) {
	m := new(StartResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverService_RunStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServiceServer).RunStream(&driverServiceRunStreamServer{stream})
}

type DriverService_RunStreamServer interface {
	Send(*RunRequest) error
	Recv() (*RunResult, error)
	grpc.ServerStream
}

type driverServiceRunStreamServer struct {
	grpc.ServerStream
}

func (x *driverServiceRunStreamServer) Send(m *RunRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverServiceRunStreamServer) Recv() (*RunResult, error) {
	m := new(RunResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverService_WriteTagStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServiceServer).WriteTagStream(&driverServiceWriteTagStreamServer{stream})
}

type DriverService_WriteTagStreamServer interface {
	Send(*RunRequest) error
	Recv() (*RunResult, error)
	grpc.ServerStream
}

type driverServiceWriteTagStreamServer struct {
	grpc.ServerStream
}

func (x *driverServiceWriteTagStreamServer) Send(m *RunRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverServiceWriteTagStreamServer) Recv() (*RunResult, error) {
	m := new(RunResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverService_BatchRunStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServiceServer).BatchRunStream(&driverServiceBatchRunStreamServer{stream})
}

type DriverService_BatchRunStreamServer interface {
	Send(*BatchRunRequest) error
	Recv() (*BatchRunResult, error)
	grpc.ServerStream
}

type driverServiceBatchRunStreamServer struct {
	grpc.ServerStream
}

func (x *driverServiceBatchRunStreamServer) Send(m *BatchRunRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverServiceBatchRunStreamServer) Recv() (*BatchRunResult, error) {
	m := new(BatchRunResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverService_DebugStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServiceServer).DebugStream(&driverServiceDebugStreamServer{stream})
}

type DriverService_DebugStreamServer interface {
	Send(*Debug) error
	Recv() (*Debug, error)
	grpc.ServerStream
}

type driverServiceDebugStreamServer struct {
	grpc.ServerStream
}

func (x *driverServiceDebugStreamServer) Send(m *Debug) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverServiceDebugStreamServer) Recv() (*Debug, error) {
	m := new(Debug)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DriverService_BatchCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).BatchCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.DriverService/BatchCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).BatchCommand(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_ChangeCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).ChangeCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.DriverService/ChangeCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).ChangeCommand(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DriverService_ServiceDesc is the grpc.ServiceDesc for DriverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "driver.DriverService",
	HandlerType: (*DriverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _DriverService_HealthCheck_Handler,
		},
		{
			MethodName: "Event",
			Handler:    _DriverService_Event_Handler,
		},
		{
			MethodName: "CommandLog",
			Handler:    _DriverService_CommandLog_Handler,
		},
		{
			MethodName: "UpdateTableData",
			Handler:    _DriverService_UpdateTableData_Handler,
		},
		{
			MethodName: "BatchCommand",
			Handler:    _DriverService_BatchCommand_Handler,
		},
		{
			MethodName: "ChangeCommand",
			Handler:    _DriverService_ChangeCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SchemaStream",
			Handler:       _DriverService_SchemaStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StartStream",
			Handler:       _DriverService_StartStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RunStream",
			Handler:       _DriverService_RunStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WriteTagStream",
			Handler:       _DriverService_WriteTagStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchRunStream",
			Handler:       _DriverService_BatchRunStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DebugStream",
			Handler:       _DriverService_DebugStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "driver/grpc/proto/driver.proto",
}
